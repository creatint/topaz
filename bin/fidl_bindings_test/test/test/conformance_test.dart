// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Code generated by tools/fidl/gidl-conformance-suite/regen.sh; DO NOT EDIT.

import 'dart:typed_data';

import 'package:test/test.dart';

import 'conformance_test_types.dart';
import 'gidl.dart';

void main() {
  group('conformance', () {
    SuccessCase.run(
        'EmptyStruct',
        EmptyStruct(),
        kEmptyStruct_Type,
        Uint8List.fromList([
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'EmptyStructSandwich',
        EmptyStructSandwich(
            before: 'before', es: EmptyStruct(), after: 'after'),
        kEmptyStructSandwich_Type,
        Uint8List.fromList([
          0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, //
          0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'Uint8Uint16Uint32Uint64',
        Uint8Uint16Uint32Uint64(
            f3: 0x4050607, f4: 0x8090a0b0c0d0e0f, f1: 0x1, f2: 0x203),
        kUint8Uint16Uint32Uint64_Type,
        Uint8List.fromList([
          0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04, //
          0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, //
        ]));

    SuccessCase.run(
        'Uint64Uint32Uint16Uint8',
        Uint64Uint32Uint16Uint8(
            f3: 0x203, f4: 0x1, f1: 0x8090a0b0c0d0e0f, f2: 0x4050607),
        kUint64Uint32Uint16Uint8_Type,
        Uint8List.fromList([
          0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, //
          0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, //
        ]));

    SuccessCase.run(
        'SimpleTableEmpty',
        StructOfSimpleTable(table: SimpleTable()),
        kStructOfSimpleTable_Type,
        Uint8List.fromList([
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
        ]));

    SuccessCase.run(
        'SimpleTableXAndY',
        StructOfSimpleTable(table: SimpleTable(x: 0x2a, y: 0x43)),
        kStructOfSimpleTable_Type,
        Uint8List.fromList([
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'SimpleTableJustY',
        StructOfSimpleTable(table: SimpleTable(y: 0x43)),
        kStructOfSimpleTable_Type,
        Uint8List.fromList([
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'TableWithStringAndVectorNoVectorContent',
        StructOfTableWithStringAndVector(
            table: TableWithStringAndVector(foo: 'hello', bar: 0x1b)),
        kStructOfTableWithStringAndVector_Type,
        Uint8List.fromList([
          0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, //
          0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'SimpleTableThenUint64',
        SimpleTableThenUint64(
            number: 0xdeadbeefdeadbeef, table: SimpleTable(x: 0x2a, y: 0x43)),
        kSimpleTableThenUint64_Type,
        Uint8List.fromList([
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'InlineXUnionInStruct',
        TestInlineXUnionInStruct(
            before: 'before',
            xu: SampleXUnion.withU(0xdeadbeef),
            after: 'after'),
        kTestInlineXUnionInStruct_Type,
        Uint8List.fromList([
          0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, //
          0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00, //
          0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'OptionalXUnionInStructAbsent',
        TestOptionalXUnionInStruct(before: 'before', after: 'after'),
        kTestOptionalXUnionInStruct_Type,
        Uint8List.fromList([
          0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, //
          0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'OptionalXUnionInStructPresent',
        TestOptionalXUnionInStruct(
            before: 'before',
            xu: SampleXUnion.withU(0xdeadbeef),
            after: 'after'),
        kTestOptionalXUnionInStruct_Type,
        Uint8List.fromList([
          0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, //
          0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00, //
          0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'XUnionInTableXUnionAbsent',
        TestXUnionInTable(
            value: XUnionInTable(before: 'before', after: 'after')),
        kTestXUnionInTable_Type,
        Uint8List.fromList([
          0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, //
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'XUnionInTableXUnionPresent',
        TestXUnionInTable(
            value: XUnionInTable(
                before: 'before',
                xu: SampleXUnion.withU(0xdeadbeef),
                after: 'after')),
        kTestXUnionInTable_Type,
        Uint8List.fromList([
          0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, //
          0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00, //
          0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, //
        ]));

    SuccessCase.run(
        'AddEthernetDeviceRequest',
        TestAddEthernetDeviceRequest(
            config: InterfaceConfig(
                ipAddressConfig: IpAddressConfig.withDhcp(true),
                name: 'ethp0003'),
            thisShouldBeAHandle: 0xffffffff,
            topologicalPath: '@/dev/sys/pci/00:03.0/e1000/ethernet'),
        kTestAddEthernetDeviceRequest_Type,
        Uint8List.fromList([
          0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, //
          0x40, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x79, //
          0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, //
          0x3a, 0x30, 0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, //
          0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, //
          0x72, 0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, //
          0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33, //
        ]));

    SuccessCase.run(
        'FileGetAttrResponse',
        FileGetAttrResponse(
            s: 0x7eadbeaf,
            attributes: NodeAttributes(
                storageSize: 0xe7,
                linkCount: 0x1,
                creationTime: 0x8877665544332211,
                modificationTime: 0xffeeddccbbaa99,
                mode: 0x962381a4,
                id: 0x1,
                contentSize: 0xe7)),
        kFileGetAttrResponse_Type,
        Uint8List.fromList([
          0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, //
          0xa4, 0x81, 0x23, 0x96, 0x00, 0x00, 0x00, 0x00, //
          0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, //
          0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, //
        ]));

    SuccessCase.run(
        'Optionals',
        StructWithOptionals(
            s2: EmptyStruct(),
            t: TableWithEmptyStruct(s: EmptyStruct()),
            xu: XUnionWithEmptyStruct.withS(EmptyStruct()),
            xu2: XUnionWithEmptyStruct.withS(EmptyStruct()),
            u: UnionWithEmptyStruct.withS(EmptyStruct()),
            u2: UnionWithEmptyStruct.withS(EmptyStruct()),
            s: EmptyStruct()),
        kStructWithOptionals_Type,
        Uint8List.fromList([
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        ]));
  });
}
