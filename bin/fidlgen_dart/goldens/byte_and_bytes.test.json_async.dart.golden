// WARNING: This file is machine generated by fidlgen.

library fidl_example_async;

import 'dart:async' as $async;
import 'dart:core' hide Set;
import 'dart:developer';
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zx;

// ignore_for_file: always_specify_types
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: avoid_returning_null
// ignore_for_file: cascade_invocations
// ignore_for_file: constant_identifier_names
// ignore_for_file: one_member_abstracts
// ignore_for_file: prefer_constructors_over_static_methods
// ignore_for_file: prefer_single_quotes
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: library_prefixes
// ignore_for_file: prefer_typing_uninitialized_variables
// ignore_for_file: avoid_js_rounded_ints
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: prefer_generic_function_type_aliases
// ignore_for_file: prefer_equal_for_default_values
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: unused_shown_name
// ignore_for_file: unnecessary_lambdas
// ignore_for_file: comment_references
// ignore_for_file: avoid_unused_constructor_parameters

class ByteAndBytes extends $fidl.Struct {
  const ByteAndBytes({
    @required this.singleByte,
    @required this.manyBytes,
    @required this.onlyOneKBytes,
    this.optOnlyOneKBytes,
  });
  ByteAndBytes.clone(
    ByteAndBytes $orig, {
    int singleByte,
    Uint8List manyBytes,
    Uint8List onlyOneKBytes,
    Uint8List optOnlyOneKBytes,
  }) : this(
          singleByte: singleByte ?? $orig.singleByte,
          manyBytes: manyBytes ?? $orig.manyBytes,
          onlyOneKBytes: onlyOneKBytes ?? $orig.onlyOneKBytes,
          optOnlyOneKBytes: optOnlyOneKBytes ?? $orig.optOnlyOneKBytes,
        );

  ByteAndBytes.cloneWithout(
    ByteAndBytes $orig, {
    bool optOnlyOneKBytes,
  }) : this(
          singleByte: $orig.singleByte,
          manyBytes: $orig.manyBytes,
          onlyOneKBytes: $orig.onlyOneKBytes,
          optOnlyOneKBytes: optOnlyOneKBytes ? null : $orig.optOnlyOneKBytes,
        );

  ByteAndBytes._(List<Object> argv)
      : singleByte = argv[0],
        manyBytes = argv[1],
        onlyOneKBytes = argv[2],
        optOnlyOneKBytes = argv[3];
  final int singleByte;
  final Uint8List manyBytes;
  final Uint8List onlyOneKBytes;
  final Uint8List optOnlyOneKBytes;

  @override
  List<Object> get $fields {
    return <Object>[
      singleByte,
      manyBytes,
      onlyOneKBytes,
      optOnlyOneKBytes,
    ];
  }

  @override
  String toString() {
    // ignore: prefer_interpolation_to_compose_strings
    return r'ByteAndBytes' r'(singleByte: ' +
        singleByte.toString() +
        r', manyBytes: ' +
        manyBytes.toString() +
        r', onlyOneKBytes: ' +
        onlyOneKBytes.toString() +
        r', optOnlyOneKBytes: ' +
        optOnlyOneKBytes.toString() +
        r')';
  }

  static ByteAndBytes _ctor(List<Object> argv) => ByteAndBytes._(argv);
}

// See FIDL-308:
// ignore: recursive_compile_time_constant
const $fidl.StructType<ByteAndBytes> kByteAndBytes_Type =
    $fidl.StructType<ByteAndBytes>(
  inlineSize: 56,
  members: <$fidl.MemberType>[
    $fidl.MemberType<int>(type: $fidl.Uint8Type(), offset: 0),
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<Uint8List>(
            element: $fidl.Uint8Type(),
            maybeElementCount: null,
            nullable: false),
        offset: 8),
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<Uint8List>(
            element: $fidl.Uint8Type(),
            maybeElementCount: 1024,
            nullable: false),
        offset: 24),
    $fidl.MemberType<Uint8List>(
        type: $fidl.VectorType<Uint8List>(
            element: $fidl.Uint8Type(),
            maybeElementCount: 1024,
            nullable: true),
        offset: 40),
  ],
  ctor: ByteAndBytes._ctor,
);

// ignore: unused_element, avoid_private_typedef_functions
typedef _VoidCallback = void Function();
