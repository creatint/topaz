// WARNING: This file is machine generated by fidlgen.

library fidl_fidl_test_json_async;

import 'dart:async' as $async;
import 'dart:core' hide Set;
import 'dart:developer';
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zx;

// ignore_for_file: always_specify_types
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: avoid_returning_null
// ignore_for_file: cascade_invocations
// ignore_for_file: constant_identifier_names
// ignore_for_file: one_member_abstracts
// ignore_for_file: prefer_constructors_over_static_methods
// ignore_for_file: prefer_single_quotes
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: library_prefixes
// ignore_for_file: prefer_typing_uninitialized_variables
// ignore_for_file: avoid_js_rounded_ints
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: prefer_generic_function_type_aliases
// ignore_for_file: prefer_equal_for_default_values
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: unused_shown_name
// ignore_for_file: unnecessary_lambdas
// ignore_for_file: comment_references
// ignore_for_file: avoid_unused_constructor_parameters

// ignore: unused_element, avoid_private_typedef_functions
typedef _VoidCallback = void Function();

// first: ($fidl.InterfaceRequest<Parent> request)
const int _kParent_First_Ordinal = 0x66a95ddc00000000;
const int _kParent_First_GenOrdinal = 0x239f8fdea8de880c;
const $fidl.MethodType _kParent_First_Type = $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<$fidl.InterfaceRequest<Parent>>(
        type: $fidl.InterfaceRequestType<Parent>(nullable: false), offset: 0),
  ],
  response: null,
  name: r"Parent.First",
  requestInlineSize: 8,
  responseInlineSize: 0,
);

abstract class Parent extends $fidl.Service {
  static const String $serviceName = null;
  @override
  $fidl.ServiceData get $serviceData => ParentData();
  $async.Future<void> first($fidl.InterfaceRequest<Parent> request);
}

class ParentData implements $fidl.ServiceData<Parent> {
  const ParentData();

  @override
  String getName() {
    return Parent.$serviceName;
  }

  @override
  $fidl.AsyncBinding getBinding() {
    return ParentBinding();
  }
}

class ParentProxy extends $fidl.AsyncProxy<Parent> implements Parent {
  ParentProxy()
      : super($fidl.AsyncProxyController<Parent>(
            $serviceName: null, $interfaceName: r'Parent')) {
    ctrl.onResponse = _handleResponse;
  }

  @override
  $fidl.ServiceData get $serviceData => ParentData();

  void _handleEvent($fidl.Message $message) {
    final $fidl.Decoder $decoder = $fidl.Decoder($message)
      ..claimMemory($fidl.kMessageHeaderSize);
    switch ($message.ordinal) {
      default:
        ctrl.proxyError(
            $fidl.FidlError('Unexpected message ordinal: ${$message.ordinal}'));
        ctrl.close();
        break;
    }
  }

  void _handleResponse($fidl.Message $message) {
    final int $txid = $message.txid;
    if ($txid == 0) {
      _handleEvent($message);
      return;
    }
    final $async.Completer $completer = ctrl.getCompleter($txid);
    if ($completer == null) {
      $message.closeHandles();
      return;
    }
    final $fidl.Decoder $decoder = $fidl.Decoder($message)
      ..claimMemory($fidl.kMessageHeaderSize);
    switch ($message.ordinal) {
      default:
        ctrl.proxyError(
            $fidl.FidlError('Unexpected message ordinal: ${$message.ordinal}'));
        ctrl.close();
        break;
    }
  }

  @override
  $async.Future<void> first($fidl.InterfaceRequest<Parent> request) async {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder();
    $encoder.encodeMessageHeader(_kParent_First_GenOrdinal, 0);
    $encoder.alloc(_kParent_First_Type.encodingRequestInlineSize($encoder));
    final List<$fidl.MemberType> $types = _kParent_First_Type.request;
    $types[0].encode($encoder, request, $fidl.kMessageHeaderSize);
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }
}

class ParentBinding extends $fidl.AsyncBinding<Parent> {
  ParentBinding() : super(r"Parent");

  @override
  void handleMessage($fidl.Message $message, $fidl.MessageSink $respond) {
    final $fidl.Decoder $decoder = $fidl.Decoder($message)
      ..claimMemory($fidl.kMessageHeaderSize);
    switch ($message.ordinal) {
      case _kParent_First_Ordinal:
      case _kParent_First_GenOrdinal:
        final String _name = _kParent_First_Type.name;
        try {
          Timeline.startSync(_name);
          final List<$fidl.MemberType> $types = _kParent_First_Type.request;
          $decoder.claimMemory(
              _kParent_First_Type.decodeRequestInlineSize($decoder));
          final $async.Future<void> $future = impl.first(
            $types[0].decode($decoder, $fidl.kMessageHeaderSize),
          );
          // ignore: avoid_catches_without_on_clauses
        } catch (_e) {
          close();
          print('Exception handling method call $_name: $_e');
          rethrow;
        } finally {
          Timeline.finishSync();
        }
        break;
      default:
        throw $fidl.FidlError(r'Unexpected message name for ParentBinding');
    }
  }
}

// first: ($fidl.InterfaceRequest<Parent> request)
const int _kChild_First_Ordinal = 0x66a95ddc00000000;
const int _kChild_First_GenOrdinal = 0x239f8fdea8de880c;
const $fidl.MethodType _kChild_First_Type = $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<$fidl.InterfaceRequest<Parent>>(
        type: $fidl.InterfaceRequestType<Parent>(nullable: false), offset: 0),
  ],
  response: null,
  name: r"Child.First",
  requestInlineSize: 8,
  responseInlineSize: 0,
);
// second: ($fidl.InterfaceRequest<Parent> request)
const int _kChild_Second_Ordinal = 0x1240cb600000000;
const int _kChild_Second_GenOrdinal = 0x24799ea8916d88af;
const $fidl.MethodType _kChild_Second_Type = $fidl.MethodType(
  request: <$fidl.MemberType>[
    $fidl.MemberType<$fidl.InterfaceRequest<Parent>>(
        type: $fidl.InterfaceRequestType<Parent>(nullable: false), offset: 0),
  ],
  response: null,
  name: r"Child.Second",
  requestInlineSize: 8,
  responseInlineSize: 0,
);

abstract class Child extends $fidl.Service {
  static const String $serviceName = null;
  @override
  $fidl.ServiceData get $serviceData => ChildData();
  $async.Future<void> first($fidl.InterfaceRequest<Parent> request);
  $async.Future<void> second($fidl.InterfaceRequest<Parent> request);
}

class ChildData implements $fidl.ServiceData<Child> {
  const ChildData();

  @override
  String getName() {
    return Child.$serviceName;
  }

  @override
  $fidl.AsyncBinding getBinding() {
    return ChildBinding();
  }
}

class ChildProxy extends $fidl.AsyncProxy<Child> implements Child {
  ChildProxy()
      : super($fidl.AsyncProxyController<Child>(
            $serviceName: null, $interfaceName: r'Child')) {
    ctrl.onResponse = _handleResponse;
  }

  @override
  $fidl.ServiceData get $serviceData => ChildData();

  void _handleEvent($fidl.Message $message) {
    final $fidl.Decoder $decoder = $fidl.Decoder($message)
      ..claimMemory($fidl.kMessageHeaderSize);
    switch ($message.ordinal) {
      default:
        ctrl.proxyError(
            $fidl.FidlError('Unexpected message ordinal: ${$message.ordinal}'));
        ctrl.close();
        break;
    }
  }

  void _handleResponse($fidl.Message $message) {
    final int $txid = $message.txid;
    if ($txid == 0) {
      _handleEvent($message);
      return;
    }
    final $async.Completer $completer = ctrl.getCompleter($txid);
    if ($completer == null) {
      $message.closeHandles();
      return;
    }
    final $fidl.Decoder $decoder = $fidl.Decoder($message)
      ..claimMemory($fidl.kMessageHeaderSize);
    switch ($message.ordinal) {
      default:
        ctrl.proxyError(
            $fidl.FidlError('Unexpected message ordinal: ${$message.ordinal}'));
        ctrl.close();
        break;
    }
  }

  @override
  $async.Future<void> first($fidl.InterfaceRequest<Parent> request) async {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder();
    $encoder.encodeMessageHeader(_kChild_First_GenOrdinal, 0);
    $encoder.alloc(_kChild_First_Type.encodingRequestInlineSize($encoder));
    final List<$fidl.MemberType> $types = _kChild_First_Type.request;
    $types[0].encode($encoder, request, $fidl.kMessageHeaderSize);
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> second($fidl.InterfaceRequest<Parent> request) async {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder();
    $encoder.encodeMessageHeader(_kChild_Second_GenOrdinal, 0);
    $encoder.alloc(_kChild_Second_Type.encodingRequestInlineSize($encoder));
    final List<$fidl.MemberType> $types = _kChild_Second_Type.request;
    $types[0].encode($encoder, request, $fidl.kMessageHeaderSize);
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }
}

class ChildBinding extends $fidl.AsyncBinding<Child> {
  ChildBinding() : super(r"Child");

  @override
  void handleMessage($fidl.Message $message, $fidl.MessageSink $respond) {
    final $fidl.Decoder $decoder = $fidl.Decoder($message)
      ..claimMemory($fidl.kMessageHeaderSize);
    switch ($message.ordinal) {
      case _kChild_First_Ordinal:
      case _kChild_First_GenOrdinal:
        final String _name = _kChild_First_Type.name;
        try {
          Timeline.startSync(_name);
          final List<$fidl.MemberType> $types = _kChild_First_Type.request;
          $decoder.claimMemory(
              _kChild_First_Type.decodeRequestInlineSize($decoder));
          final $async.Future<void> $future = impl.first(
            $types[0].decode($decoder, $fidl.kMessageHeaderSize),
          );
          // ignore: avoid_catches_without_on_clauses
        } catch (_e) {
          close();
          print('Exception handling method call $_name: $_e');
          rethrow;
        } finally {
          Timeline.finishSync();
        }
        break;
      case _kChild_Second_Ordinal:
      case _kChild_Second_GenOrdinal:
        final String _name = _kChild_Second_Type.name;
        try {
          Timeline.startSync(_name);
          final List<$fidl.MemberType> $types = _kChild_Second_Type.request;
          $decoder.claimMemory(
              _kChild_Second_Type.decodeRequestInlineSize($decoder));
          final $async.Future<void> $future = impl.second(
            $types[0].decode($decoder, $fidl.kMessageHeaderSize),
          );
          // ignore: avoid_catches_without_on_clauses
        } catch (_e) {
          close();
          print('Exception handling method call $_name: $_e');
          rethrow;
        } finally {
          Timeline.finishSync();
        }
        break;
      default:
        throw $fidl.FidlError(r'Unexpected message name for ChildBinding');
    }
  }
}
